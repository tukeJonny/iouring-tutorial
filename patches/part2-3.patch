--- part2.c	2021-03-01 00:59:42.415907524 +0900
+++ part3.c	2021-03-01 00:56:29.614979708 +0900
@@ -18,8 +18,6 @@
 int infd;
 
 struct io_data {
-	char *filename;
-	int outfd;
 	int len;
 	struct iovec iovecs[];
 };
@@ -44,6 +42,38 @@
 	return buf;
 }
 
+int *register_outfiles(struct io_uring *ring, int nr_files) {
+	int i, ret;
+	int *fds;
+	char filename[FILENAME_MAX+1];
+
+	fds = (int *)malloc(sizeof(int) * nr_files);
+	if (fds == NULL) {
+		fprintf(stderr, "[!] Failed to allocate fds region.\n");
+		return NULL;
+	}
+
+	for (i = 0; i < nr_files; i++) {
+		make_filename(filename, FILENAME_MAX+1, i);
+
+		fds[i] = open(filename, O_WRONLY|O_CREAT|O_EXCL, 0644);
+		if (fds[i] < 0) {
+			fprintf(stderr, "[!] Failed to open new outfile");
+			free(fds);
+			return NULL;
+		}
+	}
+
+	ret = io_uring_register_files(ring, fds, nr_files);
+	if (ret) {
+		fprintf(stderr, "[!] Failed to register files: %s\n", strerror(-ret));
+		free(fds);
+		return NULL;
+	}
+
+	return fds;
+}
+
 static int setup_context(unsigned entries, struct io_uring *ring) {
 	int ret;
 
@@ -59,7 +89,6 @@
 static int submit_read_random_requests(struct io_uring *ring, off_t size, int count) {
 	struct io_uring_sqe *sqe;
 	struct io_data *data;
-	char *filename;
 	int i;
 
 	int blocks = (int)size / BS;
@@ -68,13 +97,6 @@
 	}
 
 	for (i = 0; i < count; i++) {
-		filename = (char *)malloc(sizeof(char) * (FILENAME_MAX+1));
-		if (filename == NULL) {
-			perror("malloc");
-			goto err;
-		}
-		make_filename(filename, FILENAME_MAX+1, i);
-
 		data = (struct io_data *)malloc(sizeof(*data) + sizeof(struct iovec) * blocks);
 		if (!data) {
 			perror("malloc");
@@ -101,7 +123,6 @@
 			current_block++;
 			bytes_remaining -= bytes_to_read;
 		}
-		data->filename = filename;
 		data->len = current_block;
 
 		sqe = io_uring_get_sqe(ring);
@@ -119,9 +140,6 @@
 	return 0;
 
 err:
-	if (filename != NULL) {
-		free(filename);
-	}
 	if (data != NULL) {
 		free(data);
 	}
@@ -133,34 +151,28 @@
 	struct io_uring_cqe *cqe;
 	struct io_uring_sqe *sqe;
 	struct io_data *data;
-	int i, fd, ret;
+	int i, ret;
 
 	for (i = 0; i < count; i++) {
 		ret = io_uring_wait_cqe(ring, &cqe);
 		if (ret < 0) {
 			perror("io_uring_wait_cqe");
-			goto err;
+			return 1;
 		}
 		if (cqe->res < 0) {
-			fprintf(stderr, "[!] io_uring_wait_cqe: %s\n", strerror(-(cqe->res)));
-			goto err;
-		}
-		data = io_uring_cqe_get_data(cqe);
-
-		fd = open(data->filename, O_WRONLY|O_CREAT|O_TRUNC, 0644);
-		if (fd < 0) {
-			perror("open");
+			fprintf(stderr, "[!] get_read_completions:io_uring_wait_cqe: %s\n", strerror(-(cqe->res)));
 			return 1;
 		}
-		data->outfd = fd;
+		data = io_uring_cqe_get_data(cqe);
 
 		sqe = io_uring_get_sqe(ring);
 		if (!sqe) {
 			perror("io_uring_get_sqe");
-			goto err;
+			return 1;
 		}
 
-		io_uring_prep_writev(sqe, data->outfd, data->iovecs, data->len, 0);
+		io_uring_prep_writev(sqe, i, data->iovecs, data->len, 0);
+		sqe->flags |= IOSQE_FIXED_FILE;
 		io_uring_sqe_set_data(sqe, data);
 
 		io_uring_cqe_seen(ring, cqe);
@@ -168,13 +180,7 @@
 
 	io_uring_submit(ring);
 
-
 	return 0;
-
-err:
-	close(fd);
-
-	return 1;
 }
 
 int finalize_completions(struct io_uring *ring, int count) {
@@ -189,13 +195,11 @@
 			return 1;
 		}
 		if (cqe->res < 0) {
-			fprintf(stderr, "[!] io_uring_wait_cqe: %s\n", strerror(-(cqe->res)));
+			fprintf(stderr, "[!] finalize_completions:io_uring_wait_cqe: %s\n", strerror(-(cqe->res)));
 			return 1;
 		}
 
 		data = io_uring_cqe_get_data(cqe);
-		close(data->outfd);
-		free(data->filename);
 		free(data);
 
 		io_uring_cqe_seen(ring, cqe);
@@ -206,7 +210,7 @@
 
 int main(int argc, char *argv[]) {
 	struct io_uring ring;
-	int opt;
+	int i, opt;
 	int size_bytes = 100,
 		count = 10;
 	char *outdir = "/tmp/";
@@ -245,6 +249,13 @@
 	}
 
 	if (setup_context(QD, &ring)) {
+		fprintf(stderr, "[!] Failed to setup urings\n");
+		return EXIT_FAILURE;
+	}
+
+	int *fds = register_outfiles(&ring, count);
+	if (fds == NULL) {
+		fprintf(stderr, "[!] Failed to register outfiles\n");
 		return EXIT_FAILURE;
 	}
 
@@ -265,6 +276,9 @@
 	printf("[+] Elapsed %f nsec.\n", (double)diff_nsec(before, after));
 
 	close(infd);
+	for (i = 0; i < count; i++) {
+		close(fds[i]);
+	}
 	io_uring_queue_exit(&ring);
 
 	return EXIT_SUCCESS;
